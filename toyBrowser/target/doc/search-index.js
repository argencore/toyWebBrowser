var N = null;var searchIndex = {};
searchIndex["toyBrowser"]={"doc":"","items":[[0,"dom","toyBrowser","",N,N],[0,"dom","toyBrowser::dom","",N,N],[3,"Node","toyBrowser::dom::dom","The Node struct contains its children and type, the type being the object from the HTML or XML being represented",N,N],[3,"ElementData","","represents the data an element contains, in this case that  is only a tag name and a hash map string -> string",N,N],[4,"NodeType","","The enum NodeType is used to create the different kinds of  nodes that can be created and the data they store. This is a simplified implementation",N,N],[13,"Text","","",0,N],[13,"Element","","",0,N],[5,"elem","","fn elem  The function elem creates a Node with the Element enum type # Arguments",N,[[["string"],["hashmap",["string","string"]],["vec",["node"]]],["node"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]]],"paths":[[4,"NodeType"],[3,"Node"],[3,"ElementData"]]};
initSearch(searchIndex);
